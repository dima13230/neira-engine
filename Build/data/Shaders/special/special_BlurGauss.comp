
layout (local_size_x = 512, local_size_y = 1) in;


uniform sampler2D sampler0;				// Source Texture
writeonly uniform image2D sampler1;		// Destination Texture

// vec4 for better memory alignment
shared vec4 cache[gl_WorkGroupSize.x];


uniform int direction_selector;
uniform int blur_amount;
uniform vec2 texture_size;


void gaussian()
{
	uint id = gl_LocalInvocationID.x;
	uint fragmentation = gl_NumWorkGroups.y;
	uint current_fragment = gl_WorkGroupID.y;

	ivec2 texCoord = ivec2(id * fragmentation + current_fragment, gl_WorkGroupID.x);

	// Swizzle with uniform so we don't have to branch
	texCoord = ivec2(texCoord[direction_selector], texCoord[abs(direction_selector-1)]);
	float texture_size_early_out = texture_size[direction_selector];

	// Store scene in xyz and coc in w
	vec4 scene = texture(sampler0, texCoord / vec2(textureSize(sampler0, 0).xy));
	cache[id] = scene;
	
	barrier();
	memoryBarrierShared();

	if(id > texture_size_early_out / fragmentation)
	{
		imageStore(sampler1, texCoord, vec4(0.0));
		return;
	}

	float SIGMA = float(blur_amount) / 18.7;
	float SIGMA_2 = SIGMA * SIGMA;

	vec3 guass_increment;
	guass_increment.x = 1.0 / (sqrt(MATH_2_PI) * SIGMA);
	guass_increment.y = exp(-0.5 / SIGMA_2);
	guass_increment.z = guass_increment.y * guass_increment.y;
	
	vec4 final = scene * guass_increment.x;
	float increment_sum = guass_increment.x;
	guass_increment.xy *= guass_increment.yz;

	for (int i = 1; i < blur_amount; i++)
	{
		int index = i;
		ivec2 samplerCoord = ivec2(id + index, id - index);

		vec4 scene_left = cache[samplerCoord.x];
		vec4 scene_right = cache[samplerCoord.y];
		
		final += scene_left * guass_increment.x;
		final += scene_right * guass_increment.x;

		increment_sum += (2.0 * guass_increment.x);
		guass_increment.xy *= guass_increment.yz;
	}

	final /= increment_sum;

	imageStore(sampler1, texCoord, final);
}


void main() 
{
	gaussian();
}
