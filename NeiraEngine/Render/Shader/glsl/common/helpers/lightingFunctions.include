




//------------------------------------------------------
// Specular Functions
//------------------------------------------------------
// Based on https://github.com/stackgl/glsl-specular-ward
float wardSpecular(vec3 lightDirection, vec3 viewDirection, vec3 surfaceNormal, vec2 slope) 
{

	float NdotL = dot(surfaceNormal, lightDirection);
	float NdotR = dot(surfaceNormal, viewDirection);

	if(NdotL < 0.0 || NdotR < 0.0) 
	{
		return 0.0;
	}

	vec3 H = normalize(lightDirection + viewDirection);

	vec3 fiberParallel = normalize(cross(viewDirection,surfaceNormal));
	vec3 fiberPerpendicular = normalize(cross(fiberParallel, surfaceNormal));

	float NdotH = dot(surfaceNormal, H);
	float XdotH = dot(fiberParallel, H);
	float YdotH = dot(fiberPerpendicular, H);

	float coeff = sqrt(NdotL/NdotR) / (4.0 * MATH_PI * slope.x * slope.y); 
	float theta = (pow(XdotH/slope.x, 2.0) + pow(YdotH/slope.y, 2.0)) / (1.0 + NdotH);

	//float F = pow(1.0 - dot(viewDirection,H), 0.3);

	return coeff * exp(-2.0 * theta);
}

// Based on https://github.com/stackgl/glsl-specular-beckmann
float beckmannDistribution(float x, float roughness) 
{
	float NdotH = max(x, 0.0001);
	float cos2Alpha = NdotH * NdotH;
	float tan2Alpha = (cos2Alpha - 1.0) / cos2Alpha;
	float roughness2 = roughness * roughness;
	float denom = MATH_PI * roughness2 * cos2Alpha * cos2Alpha;
	return exp(tan2Alpha / roughness2) / denom;
}

// Based on https://github.com/stackgl/glsl-specular-cook-torrance
float cookTorranceSpecular(
	vec3 lightDirection,
	vec3 viewDirection,
	vec3 surfaceNormal,
	float roughness,
	float fresnel) 
{

	float VdotN = max(dot(viewDirection, surfaceNormal), 0.0);
	float LdotN = max(dot(lightDirection, surfaceNormal), 0.0);

	//Half angle vector
	vec3 H = normalize(lightDirection + viewDirection);

	//Geometric term
	float NdotH = max(dot(surfaceNormal, H), 0.0);
	float VdotH = max(dot(viewDirection, H), 0.000001);
	float LdotH = max(dot(lightDirection, H), 0.000001);
	float G1 = (2.0 * NdotH * VdotN) / VdotH;
	float G2 = (2.0 * NdotH * LdotN) / LdotH;
	float G = min(1.0, min(G1, G2));
  
	//Distribution term
	float D = beckmannDistribution(NdotH, roughness);

	//Fresnel term
	float F = max(pow(1.0 - VdotN, fresnel), 0.000001);

	//Multiply terms and done
	return  G * F * D / max(MATH_PI * VdotN, 0.000001);
}



//------------------------------------------------------
// Diffuse Functions
//------------------------------------------------------
// Based on https://github.com/stackgl/glsl-diffuse-oren-nayar
float orenNayarDiffuse(vec3 lightDirection, vec3 viewDirection, vec3 surfaceNormal, float roughness, float albedo) 
{
  
	float LdotV = dot(lightDirection, viewDirection);
	float NdotL = dot(lightDirection, surfaceNormal);
	float NdotV = dot(surfaceNormal, viewDirection);

	float s = LdotV - NdotL * NdotV;
	float t = mix(1.0, max(NdotL, NdotV), step(0.0, s));

	float sigma2 = roughness * roughness;
	float A = 1.0 + sigma2 * (albedo / (sigma2 + 0.13) + 0.5 / (sigma2 + 0.33));
	float B = 0.45 * sigma2 / (sigma2 + 0.09);

	return albedo * max(0.0, NdotL) * (A + B * s / t) / MATH_PI;
}

vec3 calcRimLighting(vec3 N, vec3 E, float light_intensity)
{
	float f = 1.0 - dot(E, N);

	f = smoothstep(0.0, 1.0, f);

	f = pow(f, 40.0);

	return f * vec3(light_intensity);
}

//------------------------------------------------------
// Lighting Calculation
//------------------------------------------------------
float calcSpotLightCone(vec3 L, vec3 light_direction, float outer_angle, float blur_amount)
{
	// Amount to blur the edge of the cone
	float spot_blur = blur_amount * (outer_angle / MATH_HALF_PI);

	// Add tiny bit to outer angle so it's rounded
	float spotAngle_outer = outer_angle - 0.01;
	float spotAngle_inner = spotAngle_outer + spot_blur;

	float spotAngle = acos(dot(light_direction,-L));

	float spotAngleDifference = spotAngle_inner - spotAngle_outer;
	float spotLightBlur = (-spotAngle + spotAngle_outer) / spotAngleDifference;

	return clamp(spotLightBlur,0.0,1.0);
}

float calcAttenuation(float light_intensity, float light_falloff, vec3 light_position, vec3 world_position, out vec3 L)
{
	// Light to Object Vector
	vec3 light_to_object = (light_position - world_position);

	// Light to Object Distance Squared
	float light_distance_2 = dot(light_to_object, light_to_object);

	// Light to Object Distance
	float light_distance = sqrt(light_distance_2);

	// Light to Object Direction
	L = light_to_object / light_distance;

	float light_falloff_2 = light_falloff * light_falloff;

	float attenuation = max(1.0 - light_distance_2 / light_falloff_2, 0.0);
	attenuation *= attenuation;
	attenuation *= attenuation;
	attenuation *= light_intensity;
	return attenuation;
}


void calcLighting(
	vec2 tex_coord, 
	vec3 world_position, vec3 world_normal, 
	vec3 cam_position,
	vec3 light_position, vec3 light_color, float light_intensity, float light_falloff,
	vec4 specular_properties,
	out vec3 L, out vec4 diffuse_out, out vec4 specular_out)
{
	
	//------------------------------------------------------
	// Lighting Vectors
	//------------------------------------------------------
	// Normal
	vec3 N = normalize(world_normal);
	// View Direction
	vec3 E = normalize(-cam_position - world_position);
	// Light to Object Direction
	L = vec3(0.0);

	//------------------------------------------------------
	// Attenuation
	//------------------------------------------------------
	float attenuation = calcAttenuation(light_intensity, light_falloff, light_position, world_position, L);


	//------------------------------------------------------
	// Angle of Inclination
	//------------------------------------------------------
	float angle_of_inc = dot(L, N);
	float max_inc = max(angle_of_inc, 0.0);

	//------------------------------------------------------
	// Diffuse
	//------------------------------------------------------
	vec4 diffuse = vec4(light_color * max_inc, 1.0);
	//diffuse *= orenNayarDiffuse(L, E, N, 0.1, 1.0);

	//diffuse.xyz += calcRimLighting(N, E, light_intensity) * max(dot(L, N)+0.3, 0.0);

	//------------------------------------------------------
	// Specular
	//------------------------------------------------------
	float specular_shininess = specular_properties.a;
	vec3 specular_color = specular_properties.xyz;

	vec2 slope = vec2(specular_shininess);
	float gaussianTerm = wardSpecular(L, E, N, slope);

	//gaussianTerm = cookTorranceSpecular(L, E, N, specular_shininess, 0.9);

	vec4 specular = vec4(
		light_color * (light_intensity / 10.0) *
		(gaussianTerm * max_inc) *
		specular_color, 1.0);


	//------------------------------------------------------
	// Add it all together
	//------------------------------------------------------

	diffuse_out = attenuation * diffuse;
	specular_out = attenuation * specular;

}